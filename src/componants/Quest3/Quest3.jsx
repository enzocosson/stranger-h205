/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Quest3.glb
*/

import React, { useLayoutEffect, useRef } from "react";
import gsap from "gsap";
import { useGLTF } from "@react-three/drei";

export const FLOOR_HEIGHT = 2.3;
export const NB_FLOORS = 3;

export function Quest3(props) {
  const { nodes, materials } = useGLTF("./models/Quest3.glb");
  const ref = useRef();
  const tl = useRef();

  useLayoutEffect(() => {
    tl.current = gsap.timeline({ paused: true });
    tl.current.to(ref.current.position, {
      duration: 0.5,
      // x: 3,
      // y: 3,
      z: 10,

      onUpdate: () => {
        ref.current.rotation.y += 0.05;
      },
    });

    tl.current.to(
      ref.current.rotation,
      {
        duration: 0.5,
        x: -0.5,
        y: -3.14,
        z: 0,

        onUpdate: () => {
          ref.current.rotation.y -= 0.05;
        },
      },
      0
    );

    tl.current.to(ref.current.position, {
      duration: 0.5,
      z: 23,
      y: 0,
      onUpdate: () => {
        ref.current.rotation.y += 0.05;
      },
    });

    tl.current.to(ref.current.rotation, {
      duration: 0.5,
      x: 0.4,

      onUpdate: () => {
        ref.current.rotation.y += 0.05;
      },
      
    },
    0.5
    );



    const handleScroll = () => {
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const progress = scrollTop / (documentHeight - windowHeight);
      tl.current.seek(progress * tl.current.duration());
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        geometry={nodes.Quest3HMD.geometry}
        material={materials.Quest3HMD}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.01}
      />
    </group>
  );
}

useGLTF.preload("./models/Quest3.glb");

export default Quest3;
